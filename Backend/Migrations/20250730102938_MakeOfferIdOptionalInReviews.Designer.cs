// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UGHApi.DATA;

#nullable disable

namespace UGHApi.Migrations
{
    [DbContext(typeof(Ugh_Context))]
    [Migration("20250730102938_MakeOfferIdOptionalInReviews")]
    partial class MakeOfferIdOptionalInReviews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Models.DeletedUserBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("Hobbies")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("Skills")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DeletedUserBackups", (string)null);
                });

            modelBuilder.Entity("UGH.Domain.Entities.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameAccommodationType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("accomodations");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext");

                    b.Property<string>("County")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<long?>("OsmId")
                        .HasColumnType("bigint");

                    b.Property<string>("OsmType")
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceId")
                        .HasColumnType("longtext");

                    b.Property<string>("Postcode")
                        .HasColumnType("longtext");

                    b.Property<string>("Road")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Suburb")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmailSentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailSentTo")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmailSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MembershipId");

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("UGH.Domain.Entities.EmailVerificator", b =>
                {
                    b.Property<int>("verificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("requestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("verificationToken")
                        .HasColumnType("char(36)");

                    b.HasKey("verificationId");

                    b.ToTable("emailverificators");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Membership", b =>
                {
                    b.Property<int>("MembershipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("MembershipID");

                    b.ToTable("memberships");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupProperties")
                        .HasColumnType("longtext");

                    b.Property<int>("GroupSize")
                        .HasColumnType("int");

                    b.Property<int>("Mobility")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("OfferType")
                        .HasColumnType("int");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("offers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Offer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UGH.Domain.Entities.OfferApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("HostId")
                        .HasColumnType("char(36)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("offerapplication");
                });

            modelBuilder.Entity("UGH.Domain.Entities.PasswordResetToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Token")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("requestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_Id")
                        .HasColumnType("char(36)");

                    b.HasKey("TokenId");

                    b.ToTable("passwordresettokens");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("pictures");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Redemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RedeemedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId")
                        .IsUnique();

                    b.ToTable("redemptions");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ReviewedId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("ReviewedId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Skill_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ParentSkill_ID")
                        .HasColumnType("int");

                    b.Property<string>("SkillDescrition")
                        .HasColumnType("longtext");

                    b.HasKey("Skill_ID");

                    b.ToTable("skills");
                });

            modelBuilder.Entity("UGH.Domain.Entities.SuitableAccommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("accommodationsuitables");
                });

            modelBuilder.Entity("UGH.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("About")
                        .HasColumnType("longtext");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BackupCodes")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email_Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Facebook_link")
                        .HasColumnType("longtext");

                    b.Property<int?>("FailedBackupCodeAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Hobbies")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBackupCodeLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastFailedBackupCodeAttempt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Link_RS")
                        .HasColumnType("longtext");

                    b.Property<string>("Link_VS")
                        .HasColumnType("longtext");

                    b.Property<int?>("MembershipId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("longblob");

                    b.Property<string>("SaltKey")
                        .HasColumnType("longtext");

                    b.Property<string>("Skills")
                        .HasColumnType("longtext");

                    b.Property<string>("TwoFactorSecret")
                        .HasColumnType("longtext");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<int>("VerificationState")
                        .HasColumnType("int");

                    b.HasKey("User_Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("MembershipId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("UGH.Domain.Entities.UserMembership", b =>
                {
                    b.Property<int>("UserMembershipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MembershipID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("char(36)");

                    b.HasKey("UserMembershipID");

                    b.HasIndex("MembershipID");

                    b.HasIndex("User_Id");

                    b.ToTable("usermembership");
                });

            modelBuilder.Entity("UGH.Domain.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Hobbies")
                        .HasColumnType("longtext");

                    b.Property<int>("Options")
                        .HasColumnType("int");

                    b.Property<string>("Skills")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("UserPic")
                        .HasColumnType("longblob");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id")
                        .IsUnique();

                    b.ToTable("userprofiles");
                });

            modelBuilder.Entity("UGHApi.Entities.ShopItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("shopitems");
                });

            modelBuilder.Entity("UGHApi.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext");

                    b.Property<int>("ShopItemId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("ShopItemId");

                    b.HasIndex("UserId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("UGH.Domain.Entities.OfferTypeLodging", b =>
                {
                    b.HasBaseType("UGH.Domain.Entities.Offer");

                    b.Property<string>("AdditionalLodgingProperties")
                        .HasColumnType("longtext");

                    b.Property<string>("LodgingType")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("OfferTypeLodging");
                });

            modelBuilder.Entity("UGH.Domain.Entities.OfferTypeRequest", b =>
                {
                    b.HasBaseType("UGH.Domain.Entities.Offer");

                    b.Property<string>("SpecialConditions")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("OfferTypeRequest");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Coupon", b =>
                {
                    b.HasOne("UGH.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Coupons")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UGH.Domain.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Offer", b =>
                {
                    b.HasOne("UGH.Domain.Entities.Address", "Address")
                        .WithMany("Offers")
                        .HasForeignKey("AddressId");

                    b.HasOne("UGH.Domain.Entities.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UGH.Domain.Entities.OfferApplication", b =>
                {
                    b.HasOne("UGH.Domain.Entities.User", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UGH.Domain.Entities.Offer", "Offer")
                        .WithMany("OfferApplications")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UGH.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Picture", b =>
                {
                    b.HasOne("UGH.Domain.Entities.Offer", "Offer")
                        .WithMany("Pictures")
                        .HasForeignKey("OfferId");

                    b.HasOne("UGH.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Redemption", b =>
                {
                    b.HasOne("UGH.Domain.Entities.Coupon", "Coupon")
                        .WithOne("Redemption")
                        .HasForeignKey("UGH.Domain.Entities.Redemption", "CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Review", b =>
                {
                    b.HasOne("UGH.Domain.Entities.Offer", "Offer")
                        .WithMany("Reviews")
                        .HasForeignKey("OfferId");

                    b.HasOne("UGH.Domain.Entities.User", "Reviewed")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("ReviewedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UGH.Domain.Entities.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Reviewed");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("UGH.Domain.Entities.User", b =>
                {
                    b.HasOne("UGH.Domain.Entities.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.HasOne("UGH.Domain.Entities.Membership", "CurrentMembership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.Navigation("Address");

                    b.Navigation("CurrentMembership");
                });

            modelBuilder.Entity("UGH.Domain.Entities.UserMembership", b =>
                {
                    b.HasOne("UGH.Domain.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UGH.Domain.Entities.User", "User")
                        .WithMany("UserMemberships")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UGH.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("UGH.Domain.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("UGH.Domain.Entities.UserProfile", "User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UGHApi.Entities.ShopItem", b =>
                {
                    b.OwnsOne("UGHApi.Entities.Money", "Price", b1 =>
                        {
                            b1.Property<int>("ShopItemId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("varchar(3)")
                                .HasColumnName("Price_Currency");

                            b1.HasKey("ShopItemId");

                            b1.ToTable("shopitems");

                            b1.WithOwner()
                                .HasForeignKey("ShopItemId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("UGHApi.Entities.Transaction", b =>
                {
                    b.HasOne("UGH.Domain.Entities.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("UGHApi.Entities.ShopItem", "ShopItem")
                        .WithMany()
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UGH.Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UGHApi.Entities.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount_Value");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("varchar(3)")
                                .HasColumnName("Amount_Currency");

                            b1.HasKey("TransactionId");

                            b1.ToTable("transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Amount");

                    b.Navigation("Coupon");

                    b.Navigation("ShopItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Address", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("Redemption");
                });

            modelBuilder.Entity("UGH.Domain.Entities.Offer", b =>
                {
                    b.Navigation("OfferApplications");

                    b.Navigation("Pictures");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("UGH.Domain.Entities.User", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("Offers");

                    b.Navigation("ReceivedReviews");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");

                    b.Navigation("UserMemberships");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
