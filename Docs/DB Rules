1. No Direct Database Changes
All schema changes must be made in code and applied via EF Core migrations.
⚠️ No changes in SSMS or other DB tools unless explicitly approved and backported to code.


2. One Developer Owns Migrations at a Time
To avoid conflicts, only one developer should create or apply migrations at a time.
✅ Working on branches and review branch of each other before merging to main


3. Every Schema Change Requires a Migration
When you modify a model (add/remove/rename a property), generate a migration:

(bash)
dotnet ef migrations add <DescriptiveName>
4. Always Run and Test Migrations
After creating a migration, run:

bash
dotnet ef database update
✅ Ensure the app runs correctly and the DB reflects the changes before pushing, otherwise, dont push! Backups Are Mandatory Before Production Migrations!
⚠️ Never apply a migration to production without a verified database backup
Consider wrapping dotnet ef database update in a manual or automated pre-check/backup step


5. Migrations Must Be Reviewed
Migration files must be included in your pull request.
Reviewers should verify:


- The model changes make sense
- The migration does not drop or rename data-critical fields by mistake


6. Sync Before You Add
Before adding a migration, always pull the latest code and apply all existing migrations:

(bash)
git pull
dotnet ef database update


7. Avoid Renaming Fields Without Care
Renaming a property deletes and recreates the column by default.
Use [Column("OldName")] or a manual RenameColumn operation in the migration if you want (and you should want that...) to preserve data
